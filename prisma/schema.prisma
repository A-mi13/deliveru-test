generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                Int          @id @default(autoincrement())
  fullName          String
  email             String       @unique
  password          String
  role              UserRole     @default(USER)
  verified          DateTime
  provider          String?
  providerId        String?
  cart              Cart?
  orders            Order[]
  verificationCode  VerificationCode?
  favorites         Favorite[]
  deliveryAddresses DeliveryAddress[]
  bonuses           Bonus[]
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  phone             String?      // Добавляем телефон как необязательное поле
  birthDate         DateTime?    // Добавляем дату рождения как необязательное поле
}

model DeliveryAddress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  address   String
  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Индекс для userId
}

model Bonus {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  amount    Int      @default(0)
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Индекс для userId
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String
  price    Int

  ingredients Ingredient[]
  items       ProductItem[]
  favorites   Favorite[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([categoryId]) // Добавлен индекс для categoryId
}

model ProductItem {
  id Int @id @default(autoincrement())

  price Int
  size  Int?
  type  Int

  cartItems CartItem[]

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId]) // Добавлен индекс для productId
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItemIngredient[]

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Card {
  id        Int     @id @default(autoincrement())
  imageUrl  String
  alt       String
  content   String
  link      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        Int      @id @default(autoincrement())
  imageUrl  String   // Ссылка на изображение
  alt       String   // Альтернативный текст
  content   String?  // Контент (опционально)
  link      String?  // Ссылка для перехода (опционально)
  isVisible Boolean  @default(true) // Видимость баннера

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Cart {
  id Int @id @default(autoincrement())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  items CartItem[]

  token String @default("")

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId]) // Добавлен индекс для userId
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  quantity Int

  ingredients CartItemIngredient[]

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productItemId]) // Добавлен индекс для productItemId
  @@index([cartId]) // Добавлен индекс для cartId
}

model CartItemIngredient {
  id          Int      @id @default(autoincrement())
  cartItemId  Int
  ingredientId Int
  quantity    Int

  cartItem    CartItem   @relation(fields: [cartItemId], references: [id])
  ingredient  Ingredient @relation(fields: [ingredientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartItemId, ingredientId]) // Уникальная связь между cartItem и ingredient
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  promoCode   PromoCode? @relation(fields: [promoCodeId], references: [id])
  promoCodeId Int?  // Опциональный промокод

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  items Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([promoCodeId]) // Индекс для promoCodeId
}


model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model PromoCode {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discountType DiscountType
  discountValue Int
  minOrderAmount Int?
  maxUses      Int?
  usedCount    Int     @default(0)
  usedBy      Json?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders       Order[] // Связь без @relation

  @@index([code])
}


enum DiscountType {
  PERCENT   // Скидка в процентах
  FIXED     // Фиксированная скидка
  FREE_SHIPPING // Бесплатная доставка
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}